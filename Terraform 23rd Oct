Day 26 - 23rd Oct
Terraform Day 1

Name  | Infra. As Code(IAC)
___________________________
AWS   - cloudformation
Azure - ARM Template
GCP   - Google deployment
Private Cloud  - Openstack - Heat Template

⦁	Terraform is a open-source tool devloped Michael Hussy
⦁	Now it's Under IBM
⦁	Terraform is written in golang.
⦁	Terraform always uses declarative approach
⦁	Terraform uses HCL - H. corp Language
⦁	It resolves all the dependencies automatically
⦁	


# IAM USER #
_____________

Name - Terra-user
⦁	AdminAccess
⦁	

@ Terra-Server @
______________

⦁	Amazon Linux
⦁	T3.micro
⦁	12gib gp2

# hostnamectl set-hostname terra.example.com
# bash
# cat /etc/os-release
# dig google.com
# ping google.com

> https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
# Amazon Linux 2023

# sudo dnf install -y dnf-plugins-core
# sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
# sudo dnf -y install terraform
# terraform -v
# mkdir /terra-code
# aws configure
# cd .aws
# rm -rf *

> https://registry.terraform.io/providers/hashicorp/aws/latest/docs
 > https://registry.terraform.io/browse/providers

# cd /terra-code
# vim provider.tf

provider "aws" {
  region     = "us-east-1"
  access_key = "<my-access-key>"
  secret_key = "<my-secret-key>"
}

> https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance

# vim provider.tf

resource "aws_instance" "dev-server" {
  ami           = "<AMI id>"
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}

> AWS > AMI Catalog > Copy AMI ID > Paste in provider.tf ami

# ls -a
# terraform init
# ls -a
# yum install tree -y
# tree -a
# cat provider.tf
# terraform fmt
# cat provider.tf
# terraform validate
# terraform plan
# terraform apply
# // Someone changes the tag and you don't know
# terraform plan
# ll
# cat terraform.tfstate
# terraform apply
# terraform destroy
# vim provider.tf
 > Delete creds
# mkdir /data-code
# cd /data-code
# vim resource.tf
 provider "aws" {}
# https://registry.terraform.io/providers/hashicorp/aws/latest/docs > Environment Variables
# export AWS_ACCESS_KEY_ID="anaccesskey"
# export AWS_SECRET_ACCESS_KEY="asecretkey"
# export AWS_REGION="us-west-1"

# vim resource.tf

resource "aws_instance" "devops-server" {
  ami           = "<ami id>"
  instance_type = "t3.micro"
  availability_zone = "us-east-1a"
  key_name = "<key-pair-name>"

  tags = {
    Name = "HelloWorld"
  }
}

# terraform init
# terraform fmt
# terraform validate
# terraform plan
# terraform apply
# cd
# ls -a

> When we will exit the current session creds will be removed. TO hardcode it do aws configure or .bashrc

# exit
# sudo su -
# aws configure
#

# Adding SG
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group

# vim provider.tf

resource "aws_instance" "devops-server" {
  ami                    = "ami-0341d95f75f311023"
  instance_type          = "t3.micro"
  availability_zone      = "us-east-1a"
  key_name               = "Project-persoanl"
  vpc_security_group_ids = [aws_security_group.terra-sg.id]
  tags = {
    Name = "HelloWorld"
  }
}

resource "aws_security_group" "terra-sg" {
  name        = "terra-sg"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = "vpc-0816734b21886205f"

  tags = {
    Name = "terra-sg"
  }

}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.terra-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "allow_ssh_ipv4" {
  security_group_id = aws_security_group.terra-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}


resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.terra-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

# terraform fmt
# terraform validate
# terraform plan
# terraform apply

> https://github.com/sanjayguruji/terra-code/blob/main/ec2-with-existing-sg

> https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance

https://github.com/sanjayguruji/terra-code/blob/main/Ec2-Instance-with-SSHKey.tf
