Day 27 - 24th Oct
Terraform Day 2


@ Terra-Server @
______________

// Creating instance with Amazon Linux AMI

⦁	Amazon Linux
⦁	T3.micro
⦁	12gib gp2

# hostnamectl set-hostname terra.example.com
# bash
# sudo dnf install -y dnf-plugins-core
# sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
# sudo dnf -y install terraform
# terraform -v
# aws configure
# mkdir /terra-code
# cd /terra-code
# vim my-ec2.tf
> 

data "aws_ami" "devops" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name   = "architecture"
    values = ["x86_64"]
  }
  filter {
    name   = "name"
    values = ["al2023-ami-2023*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

resource "aws_instance" "HelloWorld" {
  ami           = data.aws_ami.devops.id
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}

>
# terraform init
# terraform validate
# terraform fmt
# terraform plan
# terraform apply
# terraform destroy

// AWS_VPC

https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc

# cd
# mkdir /aws-vpc-code
# cd /aws-vpc-code
# vim network.tf

>

resource "aws_vpc" "prod-vpc" {
  cidr_block = "10.0.0.0/16"
}


## This is for IGW

resource "aws_internet_gateway" "prod-igw" {
  vpc_id = aws_vpc.prod-vpc.id

  tags = {
    Name = "prod-vpc"
  }
}


## THis is for public subnet

resource "aws_subnet" "public-subnet" {
  vpc_id     = aws_vpc.prod-vpc.id
  cidr_block = "10.0.0.0/24"

  tags = {
    Name = "public-subnet"
  }
}

## THis is for private subnet

resource "aws_subnet" "private-subnet" {
  vpc_id     = aws_vpc.prod-vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "private-subnet"
  }
}

## THis is for security group
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.prod-vpc.id
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Security Group Ends Here

# Creating Route table for public-subnet

resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.prod-igw.id
  }
}

# Public route table associate

resource "aws_route_table_association" "publiv-rt-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}

## ec2 in public subnet

# Private server
resource "aws_instance" "db-server" {
  ami             = "ami-0341d95f75f311023"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t3.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "terra-admin"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }

}

##create an EIP for EC2
resource "aws_eip" "sanjay-ec2-eip" {
  instance = aws_instance.db-server.id
}

# add ssh key

resource "aws_key_pair" "terra-admin" {
  key_name   = "terra-admin"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCZlb9rxK1K9lZK6op7roFNfE3tq5wZCJgUtAMTPNpHvtqLvP0tTBZOPsigAU18Zpu6gEYcZ6Js0HF1HwAkuwLsFqRP9XItcryq5HoYkQDt0OhZX2sY28NNBHyQRHjidiZyBQhHilbmbIEq03peElDiYA+VEyyac2dpf5nuxbhTqXNG0ugFRP7lYwUqoGO8/nux49N01Vy5sXcJ+LTmQcMVY5cPqn3pbGOMvW0EvEvpcTql7OJkHCBjf2Z5NUbViP/RfTHZIN4jxmU3X0znxOklesBIz/+3Ijx54Ai74EV3MH/HZ3ksQ10vjfUEYAspIuUShpQSTrAWXws0HT3WsiGKbY4cHRNnad8uPrwO97dwdem0ZaEDM+OuE+AKRPENkzfguy+LXXfbjpl3i5Vv6pGaLc7fKw1/hwtbj9+HPISoTvDcchmk0Ti5NMfwl62p0TBhxmjxSS7RWY7g8wIedNZBdpcEBSBaq28W3Yl465jIYA+GHSH0+1p5cz6ikYDXMDM= root@terra.example.com"
}

##create a public ip for Nat gateway

resource "aws_eip" "nat-eip" {
}

# Create NAT gateway

resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }


  tags = {
    Name = "private-rt"
  }
}

##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}

## Ec2 code
resource "aws_instance" "deb-server" {
  ami             = "ami-0341d95f75f311023"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t3.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "terra-admin"
  tags = {
    Name     = "server1"
    Stage    = "testing"
    Location = "chennai"
  }

}
 

>

//Change the "# add ssh key part"
// Take a duplicate terminal and
# cd
# ssh-keygen -f terra-admin
# cd .ssh
# cat terra-admin.pub
 > Copy and change in "# add ssh key" in network.tf

# terraform init
# terraform fmt
# terraform validate
# terraform plan
# terraform apply


// Using Variable

# mkdir /vars-network
# cd /vars-network
# vim network-with-vars.tf

>
#variables

variable "vpc_cidr" {
  default     = "10.0.0.0/16"
  description = "cidr for our custom vpc"
}

variable "subnet_cidr" {
  default     = "10.0.1.0/24"
  description = "cidr for subnet"
}

variable "availability_zone" {
  default     = "us-east-1a"
  description = "AZ for subnet"
}

variable "instance_ami" {
  default     = "ami-0018b373aba829819"
  description = "default ami for instances"
}

variable "instance_type" {
  default     = "t3.micro"
  description = "instance type for ec2"
}

variable "env_tag" {
  default     = "production"
  description = "environment tag"
}


# code - creating vpc

resource "aws_vpc" "vpcone" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - creating IG and attaching it to VPC

resource "aws_internet_gateway" "vpcone-ig" {
  vpc_id = aws_vpc.vpcone.id
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - create subnet inside our vpc

resource "aws_subnet" "subnet_public" {
  vpc_id                  = aws_vpc.vpcone.id
  cidr_block              = var.subnet_cidr
  map_public_ip_on_launch = "true"
  availability_zone       = var.availability_zone
  tags = {
    Name = "${var.env_tag}"
  }

}

# code - modifying route

resource "aws_route_table" "rtb_public" {
  vpc_id = aws_vpc.vpcone.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.vpcone-ig.id
  }
  tags = {
    Name = "${var.env_tag}"
  }
}


# code - attaching subnets to route table

resource "aws_route_table_association" "rta_subnet_public" {
  subnet_id      = aws_subnet.subnet_public.id
  route_table_id = aws_route_table.rtb_public.id
}


# code - create security group

resource "aws_security_group" "sg_newvpc" {
  name   = "newvpc"
  vpc_id = aws_vpc.vpcone.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.env_tag}"
  }

}


# code - create instance

resource "aws_instance" "test" {
  ami                    = var.instance_ami
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.subnet_public.id
  vpc_security_group_ids = ["${aws_security_group.sg_newvpc.id}"]
  count                  = 2
  tags = {
    Name = "${var.env_tag}"
  }
}
>
# terraform init
# terraform fmt
# terraform validate
# terraform plan
# terraform apply
# vim network-with-vars.tf


// Creating multiple Instances in different regions simultaneously aka multiple provider

# cd
# mkdir /multiple-ec2
# cd /multiple-ec2
# vim multiple-provider.tf
>
provider "aws" {
  region = "ap-south-1" #mumbai region
}

provider "aws" {
   region = "us-east-1" #virginia region
   alias = "usa"
}

resource "aws_instance" "indiaserver" {
  ami = "ami-0f4e66c71c8504ac2" #this ami is specific to mumbai region
  instance_type = "t3.micro"
  tags = {
     Name = "prod-server"
   }
}

resource "aws_instance" "usaserver" {
  ami = "ami-0018b373aba829819"   #this ami is specific to virginia region
  instance_type = "t3.micro"
  provider = aws.usa
  tags = {
     Name = "dev-server"
  }
}
>

# terraform init
# terraform fmt
# terraform validate
# terraform plan
# terraform apply




// After 2nd Coffee Break

# mkdir /user-data
# cd /user-data
# vim install_apache.sh
>

#!/bin/bash
yum install httpd -y
echo "<h1>webserver using terraform" >> /var/www/html/index.html
systemctl start httpd
systemctl enable httpd

>

# vim webserver.tf
>

provider "aws" {
  region = "us-east-1"
}


data "template_file" "web-userdata" {
        template = "${file("install_apache.sh")}"
}


resource "aws_instance" "example" {
  ami                    = "ami-0018b373aba829819"
  instance_type          = "t3.micro"
  vpc_security_group_ids = [aws_security_group.instance.id]
  user_data = "${data.template_file.web-userdata.rendered}"
  key_name = "Project-persoanl"  # Change this
  tags = {
    Name = "terraform-example"
  }
}

#security group start here

resource "aws_security_group" "instance" {

  name = var.security_group_name
#  vpc_id      = "vpc-your-vpc-id"

        ingress {
                from_port = 80
                to_port = 80
                protocol = "tcp"
                cidr_blocks = ["0.0.0.0/0"]
        }

        ingress {
                from_port = 22
                to_port = 22
                protocol = "tcp"
                cidr_blocks = ["0.0.0.0/0"]
        }

        egress {
                from_port = 0
                to_port = 0
                protocol = "-1"
                cidr_blocks = ["0.0.0.0/0"]
        }
}
#security group end here


variable "security_group_name" {
  description = "The name of the security group"
  type        = string
  default     = "terraform-example-instance"
}

#showing the public IP address using output IP

output "public_ip" {
  value       = aws_instance.example.public_ip
  description = "The public IP of the Instance"
}

>
