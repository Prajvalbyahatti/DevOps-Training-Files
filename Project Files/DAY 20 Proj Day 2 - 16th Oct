Day 20
Project Day 2 : 16-10-25
___________________________

@ Jenkins @
___________________________

Create new EC 2 instance
name : jenkins-server
c7i-flex-large
15 GIb gp3

connect the instance

google > which plugin is required for Jenkins for declarative pipeline

# hostnamectl set-hostname jenkins.example.com
# bash
#

Shell script
>

!#
sudo yum update –y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo yum install java-21-amazon-corretto -y
sudo yum install maven -y
sudo yum install git -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins



>

# vim jenkins.sh
 > paste the above shell script
# chmod +x jenkins.sh
# ./jenkins.sh

> copy public ip of the Jenkins instance and paste along with :8080
> configure jenkins

[Jenkins site]
 > Manage Jenkins > Plugins : Deploy to container
                            : Maven Integration
                            : Publish Over SSH
                            : GitHub Integration
                            : pipeline stage view
                            : pipeline rest API
 	                    : pipeline graph
 > Restart
 
> Manage Jenkins > Tools > Add JDK and Maven and remeber Maven name
# mvn -v
 
[GitHub Site]
 > configure webhook

__________________________

@ Tomcat  @
____________________________

// Create another instance and create another SG with 8080 port
// 15 gib gp3

# hostnamectl set-hostname tomcat.example.com
# bash
# yum install java* -y

/*

// if less space go to aws site volumes then select the required volume and then edit and then in terminal
 # lsblk
 # growpart /dev/nvme0n1
 XFS

*/

# yum install wget -y
download tomcat 9

# wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.111/bin/apache-tomcat-9.0.111.tar.gz
# tar -xvzf <filename>
# cd apache-tomcat
# ll
# cd bin
# chmod +x startup.sh
# chmod +x shutdown.sh
# ./startup.sh
# ./shutdown.sh
# ./startup.sh

# cd ..
# cd conf/
# vim tomcat-users.xml
Update user information in tomcat-users.xml
\#Add below lines between <tomcat-users> tag

<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>   
<user username="admin" password="admin" roles="manager-gui,manager-script,manager-jmx,manager-status"/>
<user username="deployer" password="deployer" roles="manager-script"/>
<user username="tomcat" password="s3cret" roles="manager-gui"/>

# cd . //apache-tomcat-9.0.109
# find -name context.xml
 output:
 ./conf/context.xml
 ./webapps/docs/META-INF/context.xml
 ./webapps/examples/META-INF/context.xml
 ./webapps/host-manager/META-INF/context.xml
 ./webapps/manager/META-INF/context.xml

->Now We have to comment out valve statement of last 3 files
 # vim webapps/examples/META-INF/context.xml
 # vim webapps/host-manager/META-INF/context.xml
 # vim webapps/manager/META-INF/context.xml
 

# cd bin/
# ./startup.sh

-> go to jenkins site
 ->settings(Manage Jenkins) ->Security ->credentials -> Global credentials -> Add credentials -> userid and pass - deployer

Creating Jenkins Declarative Pipeline

> https://www.blazemeter.com/blog/jenkins-declarative-pipeline\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
> Language Used : Groovy
> 

[jenkins site]

> Create new item : <Project Name>
                  : Pipeline
                  : Pipeline > Definition > Pipeline Script

"
pipeline {
    agent any

    tools {
        maven 'M3' <- Change it
    }

    environment {
        TOMCAT_USER = 'deployer'
        TOMCAT_PASS = 'deployer'
        TOMCAT_HOST = '44.199.213.219' <- change it
        TOMCAT_PORT = '8080'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/ManyataMIP/devop-project.git' <- Change it
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -Dmaven.test.failure.ignore=true'
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sh '''
                    curl -u $TOMCAT_USER:$TOMCAT_PASS \
                    --upload-file webapp/target/webapp.war \
                    "http://$TOMCAT_HOST:$TOMCAT_PORT/manager/text/deploy?path=/sampleapp&update=true"
                '''
            }
        }
    }

    post {
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
        }
    }
}

"

-> Build Now


_____________________________________________

  @ docker-server @

_____________________________________________


Create new EC2 instance
___________________
@ docker-server @
___________________
# hostnamectl set-hostname docker.example.com
# yum install docker
# systemctl start docker
# systemctl enable docker
# ssh-keygen
# cd .ssh/
# ll
# cat id_rsa.pub -> Copy

-> paste in @ jenkins server @ >
   # cd .ssh/
   # vim authorized_keys <- paste

# vim /etc/ssh/sshd_config
 > permitrootlogin
 > password
# systemctl restart sshd
# systemctl enable sshd
# passwd root
 redhat
 redhat

# aws configure // Create IAM User then create credentials
# aws ecr create-repository --repository-name my-ecr
___________________
@ jenkins-server @
___________________
# ssh-keygen
# cd .ssh/
# ll
# cat id_rsa.pub -> Copy

-> paste in @ docker-server @ >
   # cd .ssh/
   # vim authorized_keys <- paste

# :
 > permitrootlogin
 > password
# systemctl restart sshd
# systemctl enable sshd
# passwd root
 redhat
 redhat

___________________
@ docker-server @
___________________

# hostname
# ip a s
> copy hostname and ip

# vim /etc/hosts
> paste
 ip<space> name -> Copy this to paste in @ jenkins-server @

___________________
@ jenkins-server @
___________________

/*

 IF JENKINS Site Become Slow Follow the below-
 > Go to jenkins Terminal
# cd /var/lib/jenkins
# ll
# vim jenkins.model.jenkinslocationconfiguration.xml <- Check for the name
 -> Replace the exisitng ip with new public ip from EC2 page

*/

# hostname
# ip a s
> copy hostname and ip

# vim /etc/hosts
> paste
 ip<space> name
also paste ip & name copied earlier from @ docker-server @
 
-> Then paste the ip & name of @ jenkins-server @ in the
@ docker-server @

# ping docker.example.com (allow ALL icmp IPv4)

@ docker-server @

ping jenkins.example.com

[Jenkins Site Declarative Pipeline Contd.]


Manage Jenkins > System >

Add SSH Server
 - Docker and jenkins
 - in Hostname add private ip and username : root
 > Advanced > Use password
  > Test Configuration

> Poject > configuration 

pipeline script

"
pipeline {
    agent any
    tools {
        maven 'mvn' // Ensure this is configured in Jenkins Global Tool Configuration <- Change This
    }

    environment {
        TOMCAT_USER = 'deployer'
        TOMCAT_PASS = 'deployer'
        TOMCAT_HOST = '3.91.25.36' <- change this
        TOMCAT_PORT = '8080'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/dev-debaprasad/devops-sept-25.git' <- change this
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -Dmaven.test.failure.ignore=true'
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sh '''
                    curl -u $TOMCAT_USER:$TOMCAT_PASS \
                    --upload-file webapp/target/webapp.war \
                    "http://$TOMCAT_HOST:$TOMCAT_PORT/manager/text/deploy?path=/sampleapp&update=true"
                '''
            }
        }

        stage('Deploy to Docker Host') {
            steps {
                sshPublisher(publishers: [
                    sshPublisherDesc(
                        configName: 'docker', // Must match SSH config name in Jenkins
                        transfers: [
                            sshTransfer(
                                sourceFiles: '**/*',
                                removePrefix: '',
                                remoteDirectory: 'lti',
                                execCommand: '''  <- replace with your own execCommnad
                                    cd lti
                                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 916756161674.dkr.ecr.us-east-1.amazonaws.com
                                    docker build -t my-ecr-project .
                                    docker tag my-ecr-project:latest 916756161674.dkr.ecr.us-east-1.amazonaws.com/my-ecr-project:latest
                                    docker push 916756161674.dkr.ecr.us-east-1.amazonaws.com/my-ecr-project:latest
                                '''
                            )
                        ]
                    )
                ])
            }
        }
    }
 
    post {
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
        }
    }
}
 
"

@ Docker @
___________

# mkdir lti
# ld lti

> Restart both jenkins and docker services in both the terminals

> Hit Build Now AND PRAY TO GOD !!!
> Check ECR image should be there
